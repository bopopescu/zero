From 16169a2fb9381cdbb3e0c0d8891a691290b2f6be Mon Sep 17 00:00:00 2001
From: Michael Still <mikal@stillhq.com>
Date: Tue, 25 Nov 2014 15:42:47 +0300
Subject: [PATCH] libvirt: support live migration with config drives on RBD

rbd is the only example of a currently supported image storage
backend where it makes sense to put the config drive in the
configured storage backend instead of local hypervisor disk. I
don't think this makes sense for LVM, where we would be creating
a LV for a tens of megabytes file, which seems like overkill to
me. The other storage backends use local disk for their data
already.

This use case was covered by the now reverted changes:
  228d0221763b12f11ecbacde4db38b1151f96e31
  0b01e846d40f3b343da9ebe1dae89cca8bc2ac66
  ecce888c469c62374a3cc43e3cede11d8aa1e799

Support this special case by moving the image to rbd once it has
been created in the local instance directory on the hypervisor.

I've tested this change in devstack and it works.

Upstream-Kilo?: http://review.openstack.org/123073
Related-bug: #1369627
Related-bug: #1361840
Related-Bug: #1246201
Closes-Bug: #1377000

Resolves rhbz: 1194073

Co-Authored-By: Mehdi Abaakouk <sileht@redhat.com>

Conflicts:
	nova/tests/virt/libvirt/test_libvirt.py
	nova/virt/libvirt/driver.py

Change-Id: I2973b0f4997621818435b5253cf9e9a974589942
Reviewed-on: https://code.engineering.redhat.com/gerrit/43682
Tested-by: RHOS Jenkins <apevec+rhosci@redhat.com>
Reviewed-by: Padraig Brady <pbrady@redhat.com>
Tested-by: Padraig Brady <pbrady@redhat.com>
---
 nova/tests/unit/virt/libvirt/test_driver.py | 59 +++++++++++++++++++++++++----
 nova/tests/unit/virt/libvirt/test_rbd.py    | 14 +++++++
 nova/virt/libvirt/driver.py                 | 36 +++++++++++++++---
 nova/virt/libvirt/imagebackend.py           | 24 ++++++++++++
 nova/virt/libvirt/rbd_utils.py              | 13 +++++++
 5 files changed, 132 insertions(+), 14 deletions(-)

diff --git a/nova/tests/unit/virt/libvirt/test_driver.py b/nova/tests/unit/virt/libvirt/test_driver.py
index 861ab17..db33adb 100644
--- a/nova/tests/unit/virt/libvirt/test_driver.py
+++ b/nova/tests/unit/virt/libvirt/test_driver.py
@@ -7105,7 +7105,7 @@ class LibvirtConnTestCase(test.NoDBTestCase):
         drvr._chown_disk_config_for_instance(instance)
 
     def _test_create_image_plain(self, os_type='', filename='', mkfs=False):
-        gotFiles = []
+        got_files = []
 
         def fake_image(self, instance, name, image_type=''):
             class FakeImage(imagebackend.Image):
@@ -7119,7 +7119,7 @@ class LibvirtConnTestCase(test.NoDBTestCase):
 
                 def cache(self, fetch_func, filename, size=None,
                           *args, **kwargs):
-                    gotFiles.append({'filename': filename,
+                    got_files.append({'filename': filename,
                                      'size': size})
 
                 def snapshot(self, name):
@@ -7164,7 +7164,7 @@ class LibvirtConnTestCase(test.NoDBTestCase):
             {'filename': filename,
              'size': 20 * units.Gi},
             ]
-        self.assertEqual(gotFiles, wantFiles)
+        self.assertEqual(got_files, wantFiles)
 
     def test_create_image_plain_os_type_blank(self):
         self._test_create_image_plain(os_type='',
@@ -7189,8 +7189,9 @@ class LibvirtConnTestCase(test.NoDBTestCase):
                                       filename=ephemeral_file_name,
                                       mkfs=True)
 
-    def test_create_image_with_swap(self):
-        gotFiles = []
+    def _create_image_helper(self, callback, suffix=''):
+        got_files = []
+        imported_files = []
 
         def fake_image(self, instance, name, image_type=''):
             class FakeImage(imagebackend.Image):
@@ -7204,12 +7205,16 @@ class LibvirtConnTestCase(test.NoDBTestCase):
 
                 def cache(self, fetch_func, filename, size=None,
                           *args, **kwargs):
-                    gotFiles.append({'filename': filename,
+                    got_files.append({'filename': filename,
                                      'size': size})
 
                 def snapshot(self, name):
                     pass
 
+                def import_file(self, instance, local_filename,
+                                remote_filename):
+                    imported_files.append((local_filename, remote_filename))
+
             return FakeImage(instance, name)
 
         def fake_none(*args, **kwargs):
@@ -7224,6 +7229,9 @@ class LibvirtConnTestCase(test.NoDBTestCase):
 
         instance_ref = self.test_instance
         instance_ref['image_ref'] = 1
+        # NOTE(mikal): use this callback to tweak the instance to match
+        # what you're trying to test
+        callback(instance_ref)
         instance = objects.Instance(**instance_ref)
         # Turn on some swap to exercise that codepath in _create_image
         instance.flavor.swap = 500
@@ -7232,15 +7240,27 @@ class LibvirtConnTestCase(test.NoDBTestCase):
         self.stubs.Set(drvr, '_get_guest_xml', fake_none)
         self.stubs.Set(drvr, '_create_domain_and_network', fake_none)
         self.stubs.Set(drvr, 'get_info', fake_get_info)
+        self.stubs.Set(instance_metadata, 'InstanceMetadata', fake_none)
+        self.stubs.Set(nova.virt.configdrive.ConfigDriveBuilder,
+                       'make_drive', fake_none)
 
         image_meta = {'id': instance['image_ref']}
         disk_info = blockinfo.get_disk_info(CONF.libvirt.virt_type,
                                             instance,
                                             image_meta)
-        drvr._create_image(context, instance, disk_info['mapping'])
+        drvr._create_image(context, instance, disk_info['mapping'],
+                           suffix=suffix)
         drvr._get_guest_xml(self.context, instance, None,
                             disk_info, image_meta)
 
+        return got_files, imported_files
+
+    def test_create_image_with_swap(self):
+        def enable_swap(instance_ref):
+            # Turn on some swap to exercise that codepath in _create_image
+            instance_ref['system_metadata']['instance_type_swap'] = 500
+
+        got_files, _ = self._create_image_helper(enable_swap)
         wantFiles = [
             {'filename': '356a192b7913b04c54574d18c28d46e6395428ab',
              'size': 10 * units.Gi},
@@ -7249,7 +7269,28 @@ class LibvirtConnTestCase(test.NoDBTestCase):
             {'filename': 'swap_500',
              'size': 500 * units.Mi},
             ]
-        self.assertEqual(gotFiles, wantFiles)
+        self.assertEqual(got_files, wantFiles)
+
+    def test_create_image_with_configdrive(self):
+        def enable_configdrive(instance_ref):
+            instance_ref['config_drive'] = 'true'
+
+        # Ensure that we create a config drive and then import it into the
+        # image backend store
+        _, imported_files = self._create_image_helper(enable_configdrive)
+        self.assertTrue(imported_files[0][0].endswith('/disk.config'))
+        self.assertEqual('disk.config', imported_files[0][1])
+
+    def test_create_image_with_configdrive_rescue(self):
+        def enable_configdrive(instance_ref):
+            instance_ref['config_drive'] = 'true'
+
+        # Ensure that we create a config drive and then import it into the
+        # image backend store
+        _, imported_files = self._create_image_helper(enable_configdrive,
+                                                      suffix='.rescue')
+        self.assertTrue(imported_files[0][0].endswith('/disk.config.rescue'))
+        self.assertEqual('disk.config.rescue', imported_files[0][1])
 
     @mock.patch.object(nova.virt.libvirt.imagebackend.Image, 'cache',
                        side_effect=exception.ImageNotFound(image_id='fake-id'))
@@ -12311,6 +12352,8 @@ class LibvirtDriverTestCase(test.NoDBTestCase):
                                     ).AndReturn(fake_imagebackend.Raw())
         imagebackend.Backend.image(instance, 'disk.rescue', 'default'
                                     ).AndReturn(fake_imagebackend.Raw())
+        imagebackend.Backend.image(instance, 'disk.config.rescue', 'raw'
+                                        ).AndReturn(fake_imagebackend.Raw())
 
         imagebackend.Image.cache(context=mox.IgnoreArg(),
                                 fetch_func=mox.IgnoreArg(),
diff --git a/nova/tests/unit/virt/libvirt/test_rbd.py b/nova/tests/unit/virt/libvirt/test_rbd.py
index 0d34314..4e74f11 100644
--- a/nova/tests/unit/virt/libvirt/test_rbd.py
+++ b/nova/tests/unit/virt/libvirt/test_rbd.py
@@ -311,3 +311,17 @@ class RbdTestCase(test.NoDBTestCase):
     def test_cleanup_volumes_fail_other(self):
         self.assertRaises(test.TestingException,
                           self._test_cleanup_exception, 'DoesNotExist')
+
+    @mock.patch.object(rbd_utils, 'rbd')
+    @mock.patch.object(rbd_utils, 'rados')
+    @mock.patch.object(rbd_utils, 'RADOSClient')
+    def test_remove_image(self, mock_client, mock_rados, mock_rbd):
+        name = '12345_disk.config.rescue'
+
+        rbd = mock_rbd.RBD.return_value
+
+        client = mock_client.return_value
+        self.driver.remove_image(name)
+        rbd.remove.assert_called_once_with(client.ioctx, name)
+        client.__enter__.assert_called_once_with()
+        client.__exit__.assert_called_once_with(None, None, None)
diff --git a/nova/virt/libvirt/driver.py b/nova/virt/libvirt/driver.py
index 4e94b60..fe2c7a8 100644
--- a/nova/virt/libvirt/driver.py
+++ b/nova/virt/libvirt/driver.py
@@ -2580,6 +2580,15 @@ class LibvirtDriver(driver.ComputeDriver):
         return os.path.join(libvirt_utils.get_instance_path(instance),
                             'disk.config' + suffix)
 
+    @staticmethod
+    def _get_disk_config_image_type():
+        if CONF.libvirt.images_type == 'rbd':
+            # TODO(mikal): there is a bug here if images_type has
+            # changed since creation of the instance, but I am pretty
+            # sure that this bug already exists.
+            return 'rbd'
+        return 'raw'
+
     def _chown_console_log_for_instance(self, instance):
         console_log = self._get_console_log_path(instance)
         if os.path.exists(console_log):
@@ -2673,6 +2682,10 @@ class LibvirtDriver(driver.ComputeDriver):
         booted_from_volume = self._is_booted_from_volume(
             instance, disk_mapping)
 
+        # NOTE(sileht): many callers of this method assume that this
+        # method doesn't fail if an image already exists but instead
+        # think that it will be reused (ie: (live)-migration/resize)
+
         def image(fname, image_type=CONF.libvirt.images_type):
             return self.image_backend.image(instance,
                                             fname + suffix, image_type)
@@ -2830,6 +2843,19 @@ class LibvirtDriver(driver.ComputeDriver):
                                       'with error: %s'),
                                   e, instance=instance)
 
+            try:
+                # Tell the storage backend about the config drive
+                config_drive_image = self.image_backend.image(
+                    instance, 'disk.config' + suffix,
+                    self._get_disk_config_image_type())
+                config_drive_image.import_file(
+                    instance, configdrive_path, 'disk.config' + suffix)
+            finally:
+                # NOTE(mikal): if the config drive was imported into RBD, then we
+                # no longer need the local copy
+                if CONF.libvirt.images_type == 'rbd':
+                    os.unlink(configdrive_path)
+
         # File injection only if needed
         elif inject_files and CONF.libvirt.inject_partition != -2:
             if booted_from_volume:
@@ -3186,11 +3212,9 @@ class LibvirtDriver(driver.ComputeDriver):
                         block_device.prepend_dev(diskswap.target_dev))
 
             if 'disk.config' in disk_mapping:
-                diskconfig = self._get_guest_disk_config(instance,
-                                                         'disk.config',
-                                                         disk_mapping,
-                                                         inst_type,
-                                                         'raw')
+                diskconfig = self._get_guest_disk_config(
+                    instance, 'disk.config', disk_mapping, inst_type,
+                    self._get_disk_config_image_type())
                 devices.append(diskconfig)
 
         for vol in block_device.get_bdms_to_connect(block_device_mapping,
@@ -5767,7 +5791,7 @@ class LibvirtDriver(driver.ComputeDriver):
         image_meta = utils.get_image_from_system_metadata(
             instance.system_metadata)
 
-        if not (is_shared_instance_path and is_shared_block_storage):
+        if not (is_shared_instance_path or is_shared_block_storage):
             # NOTE(dims): Using config drive with iso format does not work
             # because of a bug in libvirt with read only devices. However
             # one can use vfat as config_drive_format which works fine.
diff --git a/nova/virt/libvirt/imagebackend.py b/nova/virt/libvirt/imagebackend.py
index 8655b48..91f9282 100644
--- a/nova/virt/libvirt/imagebackend.py
+++ b/nova/virt/libvirt/imagebackend.py
@@ -371,10 +371,28 @@ class Image(object):
         raise exception.ImageUnacceptable(image_id=image_id_or_uri,
                                           reason=reason)
 
+
     def _get_lock_name(self, base):
         """Get an image's name of a base file."""
         return os.path.split(base)[-1]
 
+    def import_file(self, instance, local_file, remote_name):
+        """Import an image from local storage into this backend.
+
+        Import a local file into the store used by this image type. Note that
+        this is a noop for stores using local disk (the local file is
+        considered "in the store").
+
+        If the image already exists it will be overridden by the new file
+
+        :param local_file: path to the file to import
+        :param remote_name: the name for the file in the store
+        """
+
+        # NOTE(mikal): this is a noop for now for all stores except RBD, but
+        # we should talk about if we want this functionality for everything.
+        pass
+
 
 class Raw(Image):
     def __init__(self, instance=None, disk_name=None, path=None):
@@ -767,6 +785,12 @@ class Rbd(Image):
         raise exception.ImageUnacceptable(image_id=image_id_or_uri,
                                           reason=reason)
 
+    def import_file(self, instance, local_file, remote_name):
+        name = '%s_%s' % (instance.uuid, remote_name)
+        if self.check_image_exists():
+            self.driver.remove_image(name)
+        self.driver.import_image(local_file, name)
+
 
 class Ploop(Image):
     def __init__(self, instance=None, disk_name=None, path=None):
diff --git a/nova/virt/libvirt/rbd_utils.py b/nova/virt/libvirt/rbd_utils.py
index 715941b..99ba38a 100644
--- a/nova/virt/libvirt/rbd_utils.py
+++ b/nova/virt/libvirt/rbd_utils.py
@@ -239,6 +239,19 @@ class RBDDriver(object):
         except rbd.ImageNotFound:
             return False
 
+    def remove_image(self, name):
+        """Remove RBD volume
+
+        :name: Name of RBD volume
+        """
+        with RADOSClient(self, self.pool) as client:
+            try:
+                rbd.RBD().remove(client.ioctx, name)
+            except (rbd.ImageNotFound, rbd.ImageHasSnapshots):
+                LOG.warn(_LW('rbd remove %(volume)s in pool %(pool)s '
+                                'failed'),
+                            {'volume': name, 'pool': self.pool})
+
     def import_image(self, base, name):
         """Import RBD volume from image file.
 
