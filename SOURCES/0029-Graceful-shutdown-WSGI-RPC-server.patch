From 784bf0be599c8e95cba57c85919922eea9260539 Mon Sep 17 00:00:00 2001
From: Sahid Orentino Ferdjaoui <sahid.ferdjaoui@redhat.com>
Date: Wed, 5 Aug 2015 17:49:47 +0200
Subject: [PATCH] Graceful shutdown WSGI/RPC server

Currently, termination of WSGI application or RPC server immediately stops
service and so interrupts in-progress request.

Graceful handler for SIGTERM signal was added.
SIGINT signal handler was removed to allow instantaneous termination of
service.

DocImpact: graceful termination of process can be done by sending SIGTERM
signal to parent WSGI process. Graceful termination is not instantaneous.
To force instantaneous termination SIGINT signal must be sent.

(cherry picked from commit fa9aa6b665f75e610f2b91a7d310f6499bd71770)

Downstream-Only: This is a backport of a oslo.service feature,
unit tests seems to be not able to be backported.

Upstream-Kilo: https://review.openstack.org/#/c/194357
Resolves: rhbz#1250269
Change-Id: If25f9565d832d1c36642ec3b1921563ef02890aa
Closes-bug: #1382390
Co-Author: Tiantian Gao <gtt116@gmail.com>
Reviewed-on: https://code.engineering.redhat.com/gerrit/54517
Reviewed-by: Nikola Dipanov <ndipanov@redhat.com>
Tested-by: RHOS Jenkins <apevec+rhosci@redhat.com>
Tested-by: Sahid Ferdjaoui <sahid.ferdjaoui@redhat.com>
Reviewed-by: Sahid Ferdjaoui <sahid.ferdjaoui@redhat.com>
---
 nova/openstack/common/service.py | 21 ++++++++++++++-------
 1 file changed, 14 insertions(+), 7 deletions(-)

diff --git a/nova/openstack/common/service.py b/nova/openstack/common/service.py
index 58aaa79..af82076 100644
--- a/nova/openstack/common/service.py
+++ b/nova/openstack/common/service.py
@@ -89,7 +89,6 @@ def _signo_to_signame(signo):
 
 def _set_signals_handler(handler):
     signal.signal(signal.SIGTERM, handler)
-    signal.signal(signal.SIGINT, handler)
     if _sighup_supported():
         signal.signal(signal.SIGHUP, handler)
 
@@ -271,8 +270,6 @@ class ProcessLauncher(object):
         except BaseException:
             LOG.exception(_LE('Unhandled exception'))
             status = 2
-        finally:
-            launcher.stop()
 
         return status, signo
 
@@ -311,13 +308,15 @@ class ProcessLauncher(object):
 
         pid = os.fork()
         if pid == 0:
-            launcher = self._child_process(wrap.service)
+            self.launcher = self._child_process(wrap.service)
             while True:
                 self._child_process_handle_signal()
-                status, signo = self._child_wait_for_exit_or_signal(launcher)
+                status, signo = self._child_wait_for_exit_or_signal(
+                    self.launcher)
                 if not _is_sighup_and_daemon(signo):
+                    self.launcher.wait()
                     break
-                launcher.restart()
+                self.launcher.restart()
 
             os._exit(status)
 
@@ -409,6 +408,13 @@ class ProcessLauncher(object):
     def stop(self):
         """Terminate child processes and wait on each."""
         self.running = False
+
+        LOG.debug("Stop services.")
+        for service in set(
+                [wrap.service for wrap in self.children.values()]):
+            service.stop()
+
+        LOG.debug("Killing children.")
         for pid in self.children:
             try:
                 os.kill(pid, signal.SIGTERM)
@@ -465,7 +471,6 @@ class Services(object):
         # wait for graceful shutdown of services:
         for service in self.services:
             service.stop()
-            service.wait()
 
         # Each service has performed cleanup, now signal that the run_service
         # wrapper threads can now die:
@@ -476,6 +481,8 @@ class Services(object):
         self.tg.stop()
 
     def wait(self):
+        for service in self.services:
+            service.wait()
         self.tg.wait()
 
     def restart(self):
